/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nlppreprocessing;

import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.LinkedList;
import edu.stanford.nlp.ling.CoreAnnotations.LemmaAnnotation;
import edu.stanford.nlp.ling.CoreAnnotations.SentencesAnnotation;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import edu.stanford.nlp.util.CoreMap;
import java.io.File;
import java.util.Scanner;

/**
 *
 * @author HaithamGamal
 */
public class LEM extends javax.swing.JFrame {

    /**
     * Creates new form LEM
     */
    public LEM() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        entrtxt = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        result = new javax.swing.JTextArea();
        shwupload = new javax.swing.JButton();
        shwpload = new javax.swing.JTextField();
        lem = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        rdfiletxt = new javax.swing.JTextArea();
        rdfile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 0));
        jLabel1.setText("Enter Text");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 0));
        jLabel2.setText("Result");

        entrtxt.setColumns(20);
        entrtxt.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        entrtxt.setForeground(new java.awt.Color(153, 153, 0));
        entrtxt.setRows(5);
        jScrollPane1.setViewportView(entrtxt);

        jScrollPane2.setForeground(new java.awt.Color(102, 102, 0));
        jScrollPane2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        result.setColumns(20);
        result.setRows(5);
        jScrollPane2.setViewportView(result);

        shwupload.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        shwupload.setForeground(new java.awt.Color(102, 102, 0));
        shwupload.setText("ShowUpload");
        shwupload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shwuploadActionPerformed(evt);
            }
        });

        shwpload.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        shwpload.setForeground(new java.awt.Color(255, 0, 0));
        shwpload.setEnabled(false);

        lem.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lem.setForeground(new java.awt.Color(102, 102, 0));
        lem.setText("LEM");
        lem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lemActionPerformed(evt);
            }
        });

        rdfiletxt.setColumns(20);
        rdfiletxt.setRows(5);
        jScrollPane3.setViewportView(rdfiletxt);

        rdfile.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        rdfile.setForeground(new java.awt.Color(102, 102, 0));
        rdfile.setText("ReadFromFile");
        rdfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(rdfile, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                                .addGap(61, 61, 61)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(shwupload)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shwpload, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shwpload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shwupload)
                        .addComponent(lem)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(rdfile, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shwuploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shwuploadActionPerformed
        // TODO add your handling code here:
        shwpload.setEnabled(true);
    }//GEN-LAST:event_shwuploadActionPerformed

    private void lemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lemActionPerformed
        try {
            // TODO add your handling code here:
            File dtw=new File("DataWrite.txt");
            PrintWriter writer;Scanner sc;
            
            writer=new PrintWriter(dtw);
            
            Properties props = new Properties();
            props.put("annotators", "tokenize, ssplit, pos,lemma");
            StanfordCoreNLP pipeline = new StanfordCoreNLP(props);
            
            // read some text in the text variable
            String text = "...";
            
            // create an empty Annotation just with the given text
            edu.stanford.nlp.pipeline.Annotation document = new edu.stanford.nlp.pipeline.Annotation(entrtxt.getText().toString());
            
            // run all Annotators on this text
            pipeline.annotate(document);
            pipeline.prettyPrint(document, writer);
             sc = new Scanner(dtw);
            while (sc.hasNextLine()) {
               String line = sc.nextLine();
               result.append(""+line);
               
            }
            writer.close();
            
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LEM.class.getName()).log(Level.SEVERE, null, ex);
        }

    
    
      
 
  
    }//GEN-LAST:event_lemActionPerformed

    private void rdfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdfileActionPerformed
        // TODO add your handling code here:
         try {
            // TODO add your handling code here:
            File dtw=new File("DataWrite.txt");
                  File dtw2=new File(shwpload.getText().toString());
            
            PrintWriter writer;Scanner sc;   
            
            writer=new PrintWriter(dtw);
            
            
            Properties props = new Properties();
            props.put("annotators", "tokenize, ssplit, pos,lemma");
            StanfordCoreNLP pipeline = new StanfordCoreNLP(props);
            
            // read some text in the text variable
            String text = "...";
            
            // create an empty Annotation just with the given text
            edu.stanford.nlp.pipeline.Annotation document ;
            
            // run all Annotators on this text
           
             sc = new Scanner(dtw2);
            while (sc.hasNextLine()) {
               document = new edu.stanford.nlp.pipeline.Annotation(sc.nextLine());
                pipeline.annotate(document);
            pipeline.prettyPrint(document, writer);
            
              
               
            }
            writer.close();
             sc = new Scanner(dtw);
            while(sc.hasNextLine()){
            String line=sc.nextLine();
            rdfiletxt.append(" "+"\n"+line);
            
            }
            
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LEM.class.getName()).log(Level.SEVERE, null, ex);
        }

    
    }//GEN-LAST:event_rdfileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LEM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LEM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea entrtxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton lem;
    private javax.swing.JButton rdfile;
    private javax.swing.JTextArea rdfiletxt;
    private javax.swing.JTextArea result;
    private javax.swing.JTextField shwpload;
    private javax.swing.JButton shwupload;
    // End of variables declaration//GEN-END:variables

}